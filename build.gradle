plugins {
    id 'java'
    id 'io.quarkus'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-amazon-lambda-rest:3.0.0.Alpha3'
    implementation 'software.amazon.awssdk:s3'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.338'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.quarkus:quarkus-junit5'

    // potrzebne to?
    implementation 'log4j:log4j:1.2.17'
    // potrzebne to?
    implementation 'org.slf4j:slf4j-api:2.0.3'

    implementation 'io.quarkiverse.amazonservices:quarkus-amazon-s3:1.3.1'
    implementation 'software.amazon.awssdk:url-connection-client'

    implementation platform('software.amazon.awssdk:bom:2.15.0')



}


group 'com.example'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}


task fatJar(type: Jar) {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}